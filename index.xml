<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CIS 706/801: Translator Design I &amp; II, Fall 2024 on CIS 706/801: Translator Design I &amp; II Website</title>
    <link>https://f24.compilers.santoslab.org/</link>
    <description>Recent content in CIS 706/801: Translator Design I &amp; II, Fall 2024 on CIS 706/801: Translator Design I &amp; II Website</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="https://f24.compilers.santoslab.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Advice</title>
      <link>https://f24.compilers.santoslab.org/advice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://f24.compilers.santoslab.org/advice/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h4 id=&#34;how-to-survive-in-this-course&#34;&gt;How To Survive in This Course&lt;/h4&gt;&#xA;&lt;p&gt;We cover a lot of materials in this course, and it is easy to get lost quickly if you do not keep up daily. We try to do several things to help you keep up. We provide the lecture slides and links to some additional resources.&lt;/p&gt;&#xA;&lt;p&gt;Besides all these, there are a number of things that you should do to make sure that you are getting the most out of the course. Before attending each lecture you should read the required reading material. After attending each lecture, you should review the lecture slides and any notes you have taken, then note any questions that are unresolved. You should bring those questions to the next lecture (or come to our office/emails). Obviously, you should review the weekly objectives to prepare for the quizzes. Throughout the course you should do the homework as independently and as completely as possible. If you do not do the homework, you will have difficulty on the quizzes and the exams.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Notes</title>
      <link>https://f24.compilers.santoslab.org/notes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://f24.compilers.santoslab.org/notes/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h4 id=&#34;cis-account&#34;&gt;CIS Account&lt;/h4&gt;&#xA;&lt;p&gt;If you do not have a CIS account, here is how to get one:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Get a K-State eID if you don’t already have one.&lt;/li&gt;&#xA;&lt;li&gt;Sign up online for a CIS account (which requires an active eID first!).&lt;/li&gt;&#xA;&lt;li&gt;The account manager will approve your account and you will receive a password by email to by your eID account.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;github-account&#34;&gt;GitHub Account&lt;/h4&gt;&#xA;&lt;p&gt;Coursework submissions will be done via &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;. In the beginning of the course, each student will be given a private GitHub repository; thus, you need to have a GitHub account.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>https://f24.compilers.santoslab.org/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://f24.compilers.santoslab.org/projects/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h4 id=&#34;example-project--static-java-compiler-sjc&#34;&gt;Example Project – Static Java Compiler (sjc)&lt;/h4&gt;&#xA;&lt;p&gt;Static Java Compiler (sjc) is a compiler for a strict “static” (procedural) subset of Java (a compiler for structured programs in Java without objects). This project is used to illustrate various concepts in designing and implementing a translator.&lt;/p&gt;&#xA;&lt;p&gt;Features/Limitations of Static Java&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Only two variable types: boolean and int&lt;/li&gt;&#xA;&lt;li&gt;No objects (thus, no exception handling), arrays, or threads&lt;/li&gt;&#xA;&lt;li&gt;Only static fields and methods&lt;/li&gt;&#xA;&lt;li&gt;Method return type can be the above type and void&lt;/li&gt;&#xA;&lt;li&gt;No method overloading&lt;/li&gt;&#xA;&lt;li&gt;Can call Java library static methods (e.g., Integer.parseInt())&lt;/li&gt;&#xA;&lt;li&gt;Consists only one class that has a Java main method (String array is allowed here)&lt;/li&gt;&#xA;&lt;li&gt;No increment and decrement expressions&lt;/li&gt;&#xA;&lt;li&gt;No package declaration (i.e., the declared class lives in the default package)&lt;/li&gt;&#xA;&lt;li&gt;All code must be in one file, etc.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h4 id=&#34;concrete-syntax-of-static-java&#34;&gt;Concrete Syntax of Static Java&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;program&amp;gt;                     ::= &amp;lt;class-declaration&amp;gt;&#xA;&amp;lt;class-declaration&amp;gt;           ::= &amp;#34;public&amp;#34; &amp;#34;class&amp;#34; ID &amp;#34;{&amp;#34; &amp;lt;main-method-declaration&amp;gt; &amp;lt;field-or-method-declaration&amp;gt;* &amp;#34;}&amp;#34;&#xA;&amp;lt;main-method-declaration&amp;gt;     ::= &amp;#34;public&amp;#34; &amp;#34;static&amp;#34; &amp;#34;void&amp;#34; &amp;#34;main&amp;#34; &amp;#34;(&amp;#34; &amp;#34;String&amp;#34; &amp;#34;[&amp;#34; &amp;#34;]&amp;#34; ID &amp;#34;)&amp;#34; &amp;#34;{&amp;#34; &amp;lt;method-body&amp;gt; &amp;#34;}&amp;#34;&#xA;&amp;lt;field-or-method-declaration&amp;gt; ::= &amp;lt;field-declaration&amp;gt; | &amp;lt;method-declaration&amp;gt;&#xA;&amp;lt;field-declaration&amp;gt;           ::= &amp;#34;static&amp;#34; &amp;lt;type&amp;gt; ID &amp;#34;;&amp;#34;&#xA;&amp;lt;method-declaration&amp;gt;          ::= &amp;#34;static&amp;#34; &amp;lt;return-type&amp;gt; ID &amp;#34;(&amp;#34; &amp;lt;params&amp;gt;? &amp;#34;)&amp;#34; &amp;#34;{&amp;#34; &amp;lt;method-body&amp;gt; &amp;#34;}&amp;#34;&#xA;&amp;lt;type&amp;gt;                        ::= &amp;#34;boolean&amp;#34; | &amp;#34;int&amp;#34;&#xA;&amp;lt;return-type&amp;gt;                 ::= &amp;lt;type&amp;gt; | &amp;#34;void&amp;#34;&#xA;&amp;lt;params&amp;gt;                      ::= &amp;lt;param&amp;gt; ( &amp;#34;,&amp;#34; &amp;lt;param&amp;gt; )*&#xA;&amp;lt;param&amp;gt;                       ::= &amp;lt;type&amp;gt; ID&#xA;&amp;lt;method-body&amp;gt;                 ::= &amp;lt;local-declaration&amp;gt;* &amp;lt;statement&amp;gt;*&#xA;&amp;lt;local-declaration&amp;gt;           ::= &amp;lt;type&amp;gt; ID &amp;#34;;&amp;#34;&#xA;&amp;lt;statement&amp;gt;                   ::= &amp;lt;assign-statement&amp;gt;&#xA;                                | &amp;lt;if-statement&amp;gt;&#xA;                                | &amp;lt;while-statement&amp;gt;&#xA;                                | &amp;lt;invoke-exp-statement&amp;gt;&#xA;                                | &amp;lt;return-statement&amp;gt;&#xA;&amp;lt;assign-statement&amp;gt;            ::= ID &amp;#34;=&amp;#34; &amp;lt;exp&amp;gt; &amp;#34;;&amp;#34;&#xA;&amp;lt;if-statement&amp;gt;                ::= &amp;#34;if&amp;#34; &amp;#34;(&amp;#34; &amp;lt;exp&amp;gt; &amp;#34;)&amp;#34; &amp;#34;{&amp;#34; &amp;lt;statement&amp;gt;* &amp;#34;}&amp;#34; ( &amp;#34;else&amp;#34; &amp;#34;{&amp;#34; &amp;lt;statement&amp;gt;* &amp;#34;}&amp;#34; )?&#xA;&amp;lt;while-statement&amp;gt;             ::= &amp;#34;while&amp;#34; &amp;#34;(&amp;#34; &amp;lt;exp&amp;gt; &amp;#34;)&amp;#34; &amp;#34;{&amp;#34; &amp;lt;statement&amp;gt;* &amp;#34;}&amp;#34;&#xA;&amp;lt;invoke-exp-statement&amp;gt;        ::= &amp;lt;invoke-exp&amp;gt; &amp;#34;;&amp;#34;&#xA;&amp;lt;return-statement&amp;gt;            ::= &amp;#34;return&amp;#34; &amp;lt;exp&amp;gt;? &amp;#34;;&amp;#34;&#xA;&amp;lt;exp&amp;gt;                         ::= &amp;lt;literal-exp&amp;gt;&#xA;                                | &amp;lt;unary-exp&amp;gt;&#xA;                                | &amp;lt;paren-exp&amp;gt;&#xA;                                | &amp;lt;binary-exp&amp;gt;&#xA;                                | &amp;lt;invoke-exp&amp;gt;&#xA;                                | &amp;lt;var-ref&amp;gt;&#xA;&amp;lt;literal-exp&amp;gt;                 ::= &amp;lt;boolean-literal&amp;gt; | INT&#xA;&amp;lt;boolean-literal&amp;gt;             ::= &amp;#34;true&amp;#34; | &amp;#34;false&amp;#34;&#xA;&amp;lt;unary-exp&amp;gt;                   ::= &amp;lt;unary-op&amp;gt; &amp;lt;exp&amp;gt;&#xA;&amp;lt;unary-op&amp;gt;                    ::= &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; | &amp;#34;!&amp;#34;&#xA;&amp;lt;binary-exp&amp;gt;                  ::= &amp;lt;exp&amp;gt; &amp;lt;binary-op&amp;gt; &amp;lt;exp&amp;gt;&#xA;&amp;lt;binary-op&amp;gt;                   ::= &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; | &amp;#34;*&amp;#34; | &amp;#34;/&amp;#34; | &amp;#34;%&amp;#34; | &amp;#34;&amp;gt;&amp;#34; | &amp;#34;&amp;gt;=&amp;#34; | &amp;#34;==&amp;#34; | &amp;#34;&amp;lt;&amp;#34; | &amp;#34;⇐&amp;#34; | &amp;#34;!=&amp;#34; | &amp;#34;&amp;amp;&amp;amp;&amp;#34; | &amp;#34;||&amp;#34;&#xA;&amp;lt;paren-exp&amp;gt;                   ::= &amp;#34;(&amp;#34; &amp;lt;exp&amp;gt; &amp;#34;)&amp;#34;&#xA;&amp;lt;invoke-exp&amp;gt;                  ::= ( ID &amp;#34;.&amp;#34; )? ID &amp;#34;(&amp;#34; &amp;lt;args&amp;gt;? &amp;#34;)&amp;#34;&#xA;&amp;lt;args&amp;gt;                        ::= &amp;lt;exp&amp;gt; ( &amp;#34;,&amp;#34; &amp;lt;exp&amp;gt; )*&#xA;&amp;lt;var-ref&amp;gt;                     ::= ID&#xA;&#xA;ID                              = ( ‘a’..’z’ | ‘A’..’Z’ | ‘_’ | ‘$’ ) ( ‘a’..’z’ | ‘A’..’Z’ | ‘_’ | ‘0’..’9’ | ‘$’ )*&#xA;INT                             = ‘0’ | (’1’..’9’) (’0’..’9’)*&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;static-java-as-implemented-in-eclipse-jdt-asm-and-jvm-bytecode&#34;&gt;Static Java as implemented in Eclipse JDT, ASM, and JVM Bytecode&lt;/h4&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;table&gt;&#xA;    &#xA;    &#xA;    &#xA;    &#xA;    &lt;tr&gt;&#xA;         &lt;th&gt;StaticJava&lt;/th&gt;  &lt;th&gt;&lt;a href=&#34;https://help.eclipse.org/&#34;&gt;Eclipse JDT&lt;/a&gt; (org.eclipse.jdt.core.dom.*)&lt;/th&gt;  &lt;th&gt;&lt;a href=&#34;https://asm.ow2.io/&#34;&gt;ASM&lt;/a&gt; (org.objectweb.asm.tree.*)&lt;/th&gt;  &lt;th&gt;&lt;a href=&#34;http://java.sun.com/docs/books/jvms/&#34;&gt;JVM&lt;/a&gt; Bytecode&lt;/th&gt; &#xA;    &lt;/tr&gt;&#xA;    &#xA;    &#xA;    &lt;tr&gt;&#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;code&gt;&amp;lt;program&amp;gt;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Schedule</title>
      <link>https://f24.compilers.santoslab.org/schedule/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://f24.compilers.santoslab.org/schedule/</guid>
      <description>&lt;hr&gt;&#xA;&#xA;&#xA;&#xA;&#xA;&lt;table&gt;&#xA;    &#xA;    &#xA;    &#xA;    &#xA;    &lt;tr&gt;&#xA;         &lt;th&gt;Week. Lab: Date&lt;/th&gt;  &lt;th&gt;Lectures&lt;/th&gt;  &lt;th&gt;Reading&lt;/th&gt;  &lt;th&gt;Lab&lt;/th&gt; &#xA;    &lt;/tr&gt;&#xA;    &#xA;    &#xA;    &lt;tr&gt;&#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ol&gt;&#xA;&lt;li&gt;T: Aug 20&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ul&gt;&#xA;&lt;li&gt;Scanners&lt;/li&gt;&#xA;&lt;li&gt;Parsers&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ul&gt;&#xA;&lt;li&gt;Dragon Ch. 1 - 2.3 &amp;amp; Ch. 3&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/resources/&#34;&gt;IntelliJ docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://junit.org/&#34;&gt;JUnit docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ul&gt;&#xA;&lt;li&gt;Course Overview&lt;/li&gt;&#xA;&lt;li&gt;Install Sireum IVE&lt;/li&gt;&#xA;&lt;li&gt;Set up private repos&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;    &lt;/tr&gt;&#xA;    &#xA;    &lt;tr&gt;&#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ol start=&#34;2&#34;&gt;&#xA;&lt;li&gt;U: Aug 29&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ul&gt;&#xA;&lt;li&gt;Top-down Parsers&lt;/li&gt;&#xA;&lt;li&gt;ANTLR4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ul&gt;&#xA;&lt;li&gt;Dragon Ch. 2.4 - 2.9 &amp;amp; Ch. 4&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.antlr.org/&#34;&gt;ANTLR4 docs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;&lt;/td&gt;&#xA;        &#xA;        &#xA;        &#xA;        &lt;td&gt;&lt;p&gt;&lt;ul&gt;&#xA;&lt;li&gt;Project M1: Scanner &amp;amp; Parser (due &lt;strong&gt;Sep 11&lt;/strong&gt;)&lt;/li&gt;&#xA;&lt;li&gt;Demo: Sireum IVE &amp;amp; ANTLRv4 Plugin&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Syllabus</title>
      <link>https://f24.compilers.santoslab.org/syllabus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://f24.compilers.santoslab.org/syllabus/</guid>
      <description>&lt;hr&gt;&#xA;&lt;h4 id=&#34;purpose&#34;&gt;Purpose&lt;/h4&gt;&#xA;&lt;p&gt;The course will teach modern compiler techniques applied to general-purpose programming language. The goal of the course is to give students a working knowledge of the foundations, tools, and engineering approaches used in developing formal language translators. The emphasis is on the construction of compilers to position students to build translators for little languages in their careers.&lt;/p&gt;&#xA;&lt;h4 id=&#34;course-topics&#34;&gt;Course Topics&lt;/h4&gt;&#xA;&lt;p&gt;Compilers and interpreters, including description of languages, finite state scanners, parsing, symbol tables, syntax directed semantics, code generation, and static analysis.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
